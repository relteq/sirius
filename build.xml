<?xml version="1.0" encoding="UTF-8"?>

<project name="sirius" default="jar" basedir="."
		xmlns:ivy="antlib:org.apache.ivy.ant" xmlns="antlib:org.apache.tools.ant">
	<property name="src.dir" value="${basedir}/src"/>
	<property name="test.dir" value="${basedir}/test"/>
	<property name="build.dir" value="${basedir}/build"/>
	<property name="src.encoding" value="ISO-8859-1"/>

	<property name="javac.optimize" value="on"/>
	<property name="javac.debug" value="on"/>
	<property name="javac.deprecation" value="off"/>
	<property name="javac.version" value="1.6"/>
	<property name="javac.args" value=""/>
	<property name="javac.args.warnings" value="-Xlint:unchecked"/>

	<property name="ydoc.dir" value="${basedir}/yworks-uml-doclet-3.0_01-jdk1.5"/>
	<property name="doc.dir" value="${basedir}/doc"/>

	<property name="jar.file" value="${basedir}/sirius.jar"/>
	<property name="schema.file" value="data/schema/sirius.xsd"/>

	<property name="xjc.destdir" value="${src.dir}/com/relteq/sirius/jaxb"/>

	<property name="ivy.lib.dir" value="${basedir}/lib"/>

	<property name="torque.buildfile" value="build-torque.xml"/>

	<property file="torque.properties"/>

	<path id="lib.path">
		<fileset dir="${ivy.lib.dir}" includes="*.jar"/>
	</path>

	<target name="xjctask" depends="deps-generate">
		<taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask" classpathref="lib.path"/>
	</target>

	<target name="all" depends="jar,doc,test"
			description="build a jar, generate documentation, and run tests"/>

	<target name="xsd2java" depends="xjctask">
		<mkdir dir="${xjc.destdir}"/>
		<xjc schema="${schema.file}"
				package="com.relteq.sirius.jaxb" destdir="${src.dir}"
				readonly="yes" removeOldOutput="yes">
			<produces dir="${xjc.destdir}" includes="*.java"/>
		</xjc>
	</target>

	<target name="builddir">
		<mkdir dir="${build.dir}"/>
	</target>

	<target name="compile" depends="builddir,xsd2java,deps-compile">
		<javac encoding="${src.encoding}" includeantruntime="no"
				srcdir="${src.dir}" includes="**/*.java" destdir="${build.dir}"
				classpathref="lib.path"
				debug="${javac.debug}" optimize="${javac.optimize}"
				target="${javac.version}" source="${javac.version}"
				deprecation="${javac.deprecation}">
			<compilerarg line="${javac.args} ${javac.args.warnings}"/>
		</javac>
	</target>

	<target name="resources" depends="builddir,sql,version">
		<copy file="${schema.file}" todir="${build.dir}"/>
		<copy todir="${build.dir}/sql">
			<fileset dir="${torque.output.dir}/sql">
				<include name="**/*.sql"/>
			</fileset>
		</copy>
	</target>

	<target name="jar" depends="compile,resources,deps-runtime" description="build a jar">
		<manifestclasspath property="jar.classpath" jarfile="${jar.file}">
			<classpath refid="lib.path"/>
		</manifestclasspath>
		<jar jarfile="${jar.file}" basedir="${build.dir}">
			<manifest>
				<attribute name="Main-Class" value="com.relteq.sirius.Runner"/>
				<attribute name="Class-Path" value="${jar.classpath}"/>
			</manifest>
		</jar>
	</target>

	<target name="doc" depends="xsd2java,compile,doc-db" description="generate documentation">
        <javadoc 
			encoding="${src.encoding}"
			author="yes" 
			use="yes" 
			version="yes"
			linksource="yes"
			access="protected" 
			excludepackagenames="com.relteq.sirius.*"
			destdir="${doc.dir}"
			sourcepath="${src.dir}">
			<fileset dir="${src.dir}/com/relteq/sirius/simulator"
					includes="Controller.java ObjectFactory.java Link.java Node.java
						Scenario.java SiriusStateTrajectory.java ScenarioElement.java
						Sensor.java Signal.java Event.java"/>
			<doclet 				
				name="ydoc.doclets.YStandard"
				path="${ydoc.dir}/lib/ydoc.jar:${ydoc.dir}/resources:${ydoc.dir}/doc:${build.dir}" >
				<param name="-filterpath" value="${ydoc.dir}/lib/ydoc.jar"/>
				<param name="-filter" value="ydoc.filters.ExcludeFilter"/>
			</doclet>
        </javadoc>
    </target>

	<target name="clean" description="clean up" depends="clean-test,clean-db,clean-version">
		<delete file="${jar.file}"/>
		<delete dir="${build.dir}"/>
		<delete dir="${doc.dir}"/>
		<delete dir="${ivy.lib.dir}"/>
		<delete dir="${xjc.destdir}"/>
	</target>

	<target name="deps-compile" depends="init-ivy">
		<ivy:retrieve conf="compile"/>
	</target>

	<target name="deps-generate" depends="init-ivy">
		<ivy:retrieve conf="generate"/>
	</target>

	<target name="deps-test" depends="init-ivy">
		<ivy:retrieve conf="test"/>
	</target>

	<target name="deps-runtime" depends="init-ivy">
		<ivy:retrieve conf="runtime"/>
	</target>

	<property name="ivy.install.version" value="2.1.0-rc2"/>
	<condition property="ivy.home" value="${env.IVY_HOME}">
		<isset property="env.IVY_HOME"/>
	</condition>
	<property name="ivy.home" value="${user.home}/.ant"/>
	<property name="ivy.jar.dir" value="${ivy.home}/lib"/>
	<property name="ivy.jar.file" value="${ivy.jar.dir}/ivy-${ivy.install.version}.jar"/>

	<target name="download-ivy">
		<mkdir dir="${ivy.jar.dir}"/>
		<get src="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
				dest="${ivy.jar.file}" usetimestamp="true" skipexisting="true"/>
	</target>

	<target name="init-ivy" depends="download-ivy">
		<taskdef resource="org/apache/ivy/ant/antlib.xml"
				uri="antlib:org.apache.ivy.ant"
				classpath="${ivy.jar.file}"/>
	</target>

	<path id="classpath.test">
		<path refid="lib.path"/>
		<pathelement location="${jar.file}"/>
		<pathelement location="${test.dir}"/>
	</path>

	<target name="compile-test" depends="deps-test,jar">
		<javac encoding="${src.encoding}" includeantruntime="no" debug="on"
				srcdir="${test.dir}" includes="**/*.java">
			<classpath refid="classpath.test"/>
		</javac>
	</target>

	<target name="test" description="run tests" depends="compile-test">
		<junit haltonfailure="on">
			<classpath refid="classpath.test"/>
			<formatter type="plain" usefile="false"/>
			<test name="com.relteq.sirius.simulator.OutputWriterTest"/>
		</junit>
	</target>

	<target name="clean-test">
		<delete verbose="on">
			<fileset dir="${test.dir}" includes="**/*.class" />
		</delete>
	</target>

	<uptodate property="sql.uptodate"
			srcfile="${torque.schema.dir}/${torque.project}-schema.xml"
			targetfile="${torque.output.dir}/sql/.done"/>

	<target name="sql" depends="deps-generate" unless="sql.uptodate"
			description="generate sql from xml db schema">
		<ant antfile="${torque.buildfile}" target="sql">
			<property name="torque.database" value="derby"/>
			<property name="torque.sql.dir" value="${torque.output.dir}/sql/derby"/>
		</ant>
		<ant antfile="${torque.buildfile}" target="sql">
			<property name="torque.database" value="postgresql"/>
			<property name="torque.sql.dir" value="${torque.output.dir}/sql/postgresql"/>
		</ant>
		<touch file="${torque.output.dir}/sql/.done"/>
	</target>

	<target name="doc-db" depends="deps-generate"
			description="generate documentation from xml db schema">
		<ant antfile="${torque.buildfile}" target="doc"/>
	</target>

	<target name="clean-db">
		<delete dir="${torque.output.dir}"/>
	</target>

	<property name="version.src.dir" value="util${file.separator}version"/>

	<path id="classpath.version">
		<path refid="lib.path"/>
		<pathelement location="${version.src.dir}"/>
	</path>

	<target name="compile-version" depends="deps-generate">
		<javac srcdir="${version.src.dir}"
				debug="${javac.debug}" includeantruntime="false"
				classpathref="lib.path"/>
	</target>

	<target name="version" depends="compile-version,builddir">
		<java classname="com.relteq.sirius.VersionGatherer"
				classpathref="classpath.version"
				output="${build.dir}${file.separator}engine.version"
				logerror="true"
				failonerror="true"/>
	</target>

	<target name="clean-version">
		<delete verbose="on">
			<fileset dir="${version.src.dir}" includes="**/*.class" />
		</delete>
	</target>
</project>

